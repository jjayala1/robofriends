{"version":3,"sources":["Card.js","CardList.js","Scroll.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","ficha","robots","map","d","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","console","log","state","toLowerCase","fetch","then","response","json","users","filteredRobot","this","filter","robot","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAkBeA,EAhBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAErB,OAEQ,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,iBACpB,6BACI,4BAAKC,GACL,2BAAIC,MCOTI,EAdE,SAAC,GAAgB,IAGxBC,EAHuB,EAAbC,OAGKC,KAAI,SAACC,EAAGC,GACzB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIU,EAAEV,GAAIC,KAAMS,EAAET,KAAMC,MAAOQ,EAAER,WAG1D,OACI,6BACKK,ICMEM,EAfA,SAACC,GAGZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,WCSAC,EAfG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAE7B,OACI,yBAAKnB,UAAU,OACf,2BACIoB,KAAK,SACLC,YAAY,eACZrB,UAAU,mCACVsB,SAAUH,MC8CPI,G,wDA9CX,aAAc,IAAD,8BACT,gBAQJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,QACzCC,QAAQC,IAAI,EAAKC,MAAMb,YAAYc,gBATnC,EAAKD,MAAQ,CACT1B,OAAQ,GACRa,YAAa,IALR,E,gEAeO,IAAD,OACfe,MAAM,8CACDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACrB,OAAQgC,S,+BAGtC,IAAD,OACEC,EAAgBC,KAAKR,MAAM1B,OAAOmC,QAAO,SAACC,GAC5C,OAAOA,EAAM3C,KAAKkC,cAAcU,SAAS,EAAKX,MAAMb,YAAYc,gBAAkBS,EAAM1C,MAAMiC,cAAcU,SAAS,EAAKX,MAAMb,YAAYc,kBAGhJ,OAAiC,IAA7BO,KAAKR,MAAM1B,OAAOsC,QAClBd,QAAQC,IAAI,WAER,yBAAK9B,UAAU,MAAK,gDAKpB,yBAAKA,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWmB,aAAcoB,KAAKf,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAQiC,U,GAxChBM,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCJNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.63adb4a9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n\n    return(\n\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <img alt='Robot' src={`https://robohash.org/${id}?size=80x80`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n    );\n\n}\n\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({ robots }) => {\n\n\n    const ficha = robots.map((d, i) => {\n        return(<Card key={i} id={d.id} name={d.name} email={d.email} />);\n    });\n\n    return(\n        <div>\n            {ficha}\n        </div>\n    );\n}\n\nexport default CardList;\n","import React from 'react';\n\n\nconst Scroll = (props) =>{\n\n\n    return(\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n        {props.children}\n\n        </div>\n\n\n    );\n\n\n}\n\nexport default Scroll;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n\n    return(\n        <div className='pa2'>\n        <input\n            type='search'\n            placeholder='search robot'\n            className='pa3 ba b--green bg-lightest-blue'\n            onChange={searchChange}\n        />\n        </div>\n\n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\nimport CardList from './CardList';\nimport Scroll from './Scroll';\nimport SearchBox from './SearchBox';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n    constructor(){\n        super();\n\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    onSearchChange = (event) => {\n\n        this.setState({searchfield: event.target.value})\n        console.log(this.state.searchfield.toLowerCase());\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then( response => response.json())\n            .then( users => this.setState({robots: users}));\n    }\n\n    render(){\n        const filteredRobot = this.state.robots.filter((robot) =>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase()) || robot.email.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        });\n\n        if (this.state.robots.length === 0) {\n            console.log(\"loading\")\n            return (\n                <div className='tc'><h1>Loading robots</h1></div>\n            );\n        }\n        else {\n            return (\n                <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                <CardList robots={filteredRobot}/>\n                </Scroll>\n            </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n//ReactDOM.render(\n//    <App />\n//  document.getElementById('root')\n//);\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}